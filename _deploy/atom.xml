<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[1:1 Engineering]]></title>
  <link href="http://one-on-one.github.com/atom.xml" rel="self"/>
  <link href="http://one-on-one.github.com/"/>
  <updated>2013-04-02T17:55:50-06:00</updated>
  <id>http://one-on-one.github.com/</id>
  <author>
    <name><![CDATA[1:1 Engineering]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[deploy test]]></title>
    <link href="http://one-on-one.github.com/blog/2013/03/27/deploy-test/"/>
    <updated>2013-03-27T13:44:00-06:00</updated>
    <id>http://one-on-one.github.com/blog/2013/03/27/deploy-test</id>
    <content type="html"><![CDATA[<p>TEST</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[what can devops do for you]]></title>
    <link href="http://one-on-one.github.com/blog/2013/03/27/what-can-devops-do-for-you/"/>
    <updated>2013-03-27T08:48:00-06:00</updated>
    <id>http://one-on-one.github.com/blog/2013/03/27/what-can-devops-do-for-you</id>
    <content type="html"><![CDATA[<p>DevOps is something most software engineers have always had to do. It is a fairly new term that reflects the move to more sophistication in tools and recognition that this sophistication is starting to demand its own specialization.</p>

<p>More text here will be filled with actual content after I get deployment to work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I like Go: Porting Ruby's State Jacket]]></title>
    <link href="http://one-on-one.github.com/blog/2013/03/23/why-i-like-go/"/>
    <updated>2013-03-23T09:51:00-06:00</updated>
    <id>http://one-on-one.github.com/blog/2013/03/23/why-i-like-go</id>
    <content type="html"><![CDATA[<p>I&#8217;m fairly new to professional software engineering and my start was not typical. I first started in academia with Prolog and Lisp; my background is in formal/mathematical philosophy and linguistics. In the last few months I have spent concentrated blocks of time on learning Nodejs, Clojure, Scala, and now Go.</p>

<p>Beside the academic and professional development benefits of doing this, I have a practical reason: I dream of building a very fast, efficient, &#8220;smart&#8221;, and easy to use logging tool. By &#8220;smart&#8221; I mean applying machine learning and natural language processing to the semi-structured data found in production logs. This means I need support for large matrix multiplication, among other things. Ruby and Python simply do not fit the bill (for me).</p>

<!-- more -->


<p>Don&#8217;t get me wrong, I would love to do this in Ruby. I tried a couple times and did not like it. Additionally, I do not want to invest in Python given that it&#8217;s so similar to Ruby. I&#8217;m not going to compare all the pros and cons of the different langauges mentioned in this post (you can find enough of that fud on HackerNews), instead, let&#8217;s just explain my choices as highly personal and motivated by what felt like was the right way for me.</p>

<p>I was initially drawn to Clojure because it is virtually the only chance a developer has of getting paid to work with a Lisp, and then switched efforts to Scala because it&#8217;s more realistic to convince your team to do something in Scala than it is Clojure. Nodejs is great and V8 is blazing, but once I read through a <a href="http://golang.org/doc/codewalk/markov/">Go Codewalk for Markov Chain random text generation</a> I was hooked. It seemed to strike the right balance between:</p>

<ul>
<li>High level API of Ruby <strong>AND</strong> low level concerns of C</li>
<li><em>the right thing</em> Lisp <strong>AND</strong> <em>worse is better</em> C/Unix

<ul>
<li>See, for example <a href="http://www.jwz.org/doc/worse-is-better.html">The Rise of &#8220;Worse is Better&#8221;</a></li>
</ul>
</li>
<li>Feeling excited about <strong>AND</strong> responsible for good engineering decisions</li>
</ul>


<h2>Porting Ruby to Go</h2>

<p><a href="https://github.com/hopsoft/state_jacket">State Jacket</a> is a Ruby library for helping to &#8220;Intuitively define state machine like states and transitions&#8221;.</p>

<blockquote><p>StateJacket simplifies things by isolating the management of states & transitions. Events are left out, making it much easier to reason about what states exist and how they transition to other states.</p><footer><strong>Nate Hopkins, State Jacket</strong> <cite><a href='https://github.com/hopsoft/state_jacket/blob/master/README.md'>README</a></cite></footer></blockquote>


<p></p>

<p>I spent about 6 hours initially porting 70 lines of Ruby to 70 lines of Go. Much of my time was spent in figuring out the right structure for the data/object; the rest with familiarizing myself with Go idioms. It is a simple project but I want to spend more time refining it until I create a Go package for it, for now you can see my initial work here:</p>

<div><script src='https://gist.github.com/5228042.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Octopress]]></title>
    <link href="http://one-on-one.github.com/blog/2013/03/15/getting-started-with-octopress/"/>
    <updated>2013-03-15T08:45:00-06:00</updated>
    <id>http://one-on-one.github.com/blog/2013/03/15/getting-started-with-octopress</id>
    <content type="html"><![CDATA[<h3>The good</h3>

<p><a href="http://octopress.org/">Octopress</a> is an <strong>out of the box</strong> blogging solution that sits atop <a href="https://github.com/mojombo/jekyll">Jekyll</a>
<em>a static site generator</em>.
It&#8217;s great for folks who want to quickly get a blog up and running on <a href="https://github.com/">Github</a>.</p>

<h3>The bad</h3>

<p>Octopress is ripe with inconsistent and varied ways to customize the CSS, templates, partials, and conditional logic.
This is anathema for anyone who wants a sensible way to truly control things.</p>

<p>Luckily, I&#8217;ve customized this blog till it&#8217;s &#8220;good enough&#8221;
so my teammates shouldn&#8217;t have to experience the pain that I went through.</p>

<h3>The future</h3>

<p>I highly recommend considering a vanilla Jekyll solution over Octopress&#8230;
even if you are already running Octopress.</p>

<p>Having said all of that, here are some tips to help you get up to speed quickly with Octopress.</p>

<h2>Quick Start</h2>

<p>Here&#8217;s how to get setup as a writer for this blog.
Run the following commands in your shell.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:one-on-one/one-on-one.github.com.git
</span><span class='line'>cd one-on-one.github.com
</span><span class='line'>bundle
</span><span class='line'>rake -T</span></code></pre></td></tr></table></div></figure>


<p>The last command lists the rake tasks that Octopress makes available to you.</p>

<!-- more -->


<h2>Writing</h2>

<p>You can write blog articles using your favorite text editor.
To get started simply run the following command in a shell.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post['The title of the post']</span></code></pre></td></tr></table></div></figure>


<p><strong>zsh users</strong>: You will want to run <code>noglob rake new_post['The title of the post']</code></p>

<p>The above command produces output like this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Creating new post: source/_posts/2013-03-18-the-title-of-the-post.markdown</span></code></pre></td></tr></table></div></figure>


<p>Now open the newly created file in your favorite editor.</p>

<h3>Front Matter</h3>

<p>The first thing you will notice is the <a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">YAML front matter</a>.
Something that looks like this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: custom_post
</span><span class='line'>title: Getting Started with Octopress
</span><span class='line'>date: 2013-03-15 08:45
</span><span class='line'>comments: true
</span><span class='line'>categories:
</span><span class='line'>
</span><span class='line'>author: Nathan Hopkins
</span><span class='line'>gravatar: 254ec240c9143768df8ec27182764cad
</span><span class='line'>github: hopsoft
</span><span class='line'>twitter: natehop
</span><span class='line'>linkedin: 2951631
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>The following entries are included by default.</p>

<ul>
<li><strong>layout</strong> be sure to change this to <code>custom_post</code></li>
<li><strong>title</strong> the title of your post</li>
<li><strong>date</strong> the date the post was written</li>
<li><strong>comments</strong> indicates you allow comments on the post</li>
<li><strong>categories</strong> a <a href="http://en.wikipedia.org/wiki/YAML#Lists">YAML list</a> or space separated string of meta tags for this post</li>
</ul>


<p>These entries must be manually added.</p>

<ul>
<li><strong>author</strong> the name of the author</li>
<li><strong>gravatar</strong> the author&#8217;s <a href="https://en.gravatar.com/site/implement/hash/">Gravatar MD5 hash</a></li>
<li><strong>github</strong> the author&#8217;s Github username</li>
<li><strong>twitter</strong> the author&#8217;s Twitter handle</li>
<li><strong>linkedin</strong> the author&#8217;s Linked In id</li>
</ul>


<p>After you have taken care of the YAML front matter, simply write your article using <a href="http://daringfireball.net/projects/markdown/">Markdown</a> syntax.</p>

<p>If you don&#8217;t want the entire article to show on the index page, simply add a <code>more</code> flag to break the content apart.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Show on the home page.
</span><span class='line'>
</span><span class='line'>&lt;!-- more --&gt;
</span><span class='line'>
</span><span class='line'>Only shows on the article page.</span></code></pre></td></tr></table></div></figure>


<h3>Previewing</h3>

<p>To preview your post, run the following command from a shell.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>Then navigate to <a href="http://localhost:4000">http://localhost:4000</a> to view your article.
Simply refresh the browser window as you make changes.</p>

<h3>Publishing</h3>

<p>Once you have finished writing, commit your article to the git repo. Then publish with rake.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit -am "Wrote an article."
</span><span class='line'>git push origin source
</span><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it! Now get to writing.</p>

<h2>Customizing Octopress</h2>

<p>You can ignore this section unless you have a need to customize the markup or CSS.
If you plan to customize things, please read on.</p>

<h3>CSS</h3>

<p>There is a <code>custom</code> directory under the <code>sass</code> directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|- blog
</span><span class='line'>  |- sass
</span><span class='line'>    |- custom
</span><span class='line'>      |- _colors.scss
</span><span class='line'>      |- _fonts.scss
</span><span class='line'>      |- _layout.scss
</span><span class='line'>      |- _styles.scss</span></code></pre></td></tr></table></div></figure>


<p>This custom directory is the intended home for all of your css customizations.</p>

<ul>
<li><code>_colors.scss</code> where color overrides should be defined</li>
<li><code>_fonts.scss</code> where font overrides should be defined</li>
<li><code>_layout.scss</code> where layout overrides should be defined</li>
<li><code>_styles.scss</code> where all other overrides should be defined</li>
</ul>


<p>You can also add additional stylesheets under the custom directory.
For example, I&#8217;ve added Font Awesome&#8217;s stylesheet.</p>

<h3>Markup</h3>

<p>There is a <code>custom</code> directory under the <code>source/_includes</code> directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|- blog
</span><span class='line'>  |- source
</span><span class='line'>    |- _includes
</span><span class='line'>      |- custom
</span><span class='line'>        |- asides
</span><span class='line'>        |- post
</span><span class='line'>        |- after_footer.html
</span><span class='line'>        |- etc...</span></code></pre></td></tr></table></div></figure>


<p>The intent is to isolate markup overrides to things that live in the custom directory.</p>

<p>At first glance it seems possible to override the important files defined in the includes directory.
The problem is that not all files are mirrored in the custom directory.
Also, the naming convention and file intent varies between the two directories.</p>

<p>This leads to confusion. It&#8217;s also too restrictive.</p>

<p>In order to get around the limitations, I&#8217;ve started adding new layouts to the <code>source/_layouts</code> directory.
I use the convention, <code>custom_ORIGINAL_NAME.html</code> for the new layouts.</p>

<p>The custom layout can then be specified in the YAML front matter of individual posts.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: custom_post
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>These pain points are why I recommend moving to a vanilla Jekyll solution.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
</feed>
