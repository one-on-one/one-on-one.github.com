<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[1:1 Engineering]]></title>
  <link href="http://one-on-one.github.com/atom.xml" rel="self"/>
  <link href="http://one-on-one.github.com/"/>
  <updated>2013-05-23T11:49:39-06:00</updated>
  <id>http://one-on-one.github.com/</id>
  <author>
    <name><![CDATA[1:1 Engineering]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Engineering Practices at 1:1]]></title>
    <link href="http://one-on-one.github.com/blog/2013/05/16/engineering-practices-at-1-1/"/>
    <updated>2013-05-16T09:30:00-06:00</updated>
    <id>http://one-on-one.github.com/blog/2013/05/16/engineering-practices-at-1-1</id>
    <content type="html"><![CDATA[<p>Expediency often rules the day in business, but at 1:1 we&#8217;ve establised a couple
of practices to help ensure that developers don&#8217;t shoot themselves, <em>or the team</em>,
in the foot.</p>

<h2>No Hot Patches!</h2>

<p>The definintion of hot-patch in this context means:
<em>live code editing on production servers</em>.</p>

<p>As crazy as this sounds, it has happened in the past.
Sometimes the convenience seems too tempting&#8230; especially for minor experiments.
But the convenience isn&#8217;t worth team members getting pulled out of bed in the
wee hours only to discover a typo someone made in a live edit.</p>

<p>It&#8217;s especially frustrating because it doesn&#8217;t leave a paper trail.
The tools we employ, like Git, become effectively useless in this scenario.</p>

<p><strong>Never make live code edits on the server! Always make a formal commit and deploy.</strong></p>

<h2>Always Create a Topic Branch!</h2>

<p>All new development should occur on a
<a href="http://git-scm.com/book/en/Git-Branching-Branching-Workflows">topic branch</a>,
not the master branch.</p>

<p>The master branch should always be stable and production ready.
A deploy might occur at any time, so the code on master must be production ready.</p>

<p><strong>This rule is universal (no exceptions)</strong>&#8230; even for developers working on their own.
Once the work is complete, a <a href="https://help.github.com/articles/using-pull-requests">pull request</a>
should be created. The change-set should be code reviewed after the pull request has been created,
<em>ideally by someone other than the original developer</em>.
Once the pull request is approved, the topic branch should be merged into master.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Documenting Github Projects]]></title>
    <link href="http://one-on-one.github.com/blog/2013/05/16/documenting-github-projects/"/>
    <updated>2013-05-16T09:30:00-06:00</updated>
    <id>http://one-on-one.github.com/blog/2013/05/16/documenting-github-projects</id>
    <content type="html"><![CDATA[<p>Our team has struggled with finding the best solution for project documentation.
Some projects require internal documentation while others require public API docs.
Several projects require both.</p>

<p>Then I stumbled into how 37 Signals manages their <a href="https://github.com/37signals/api">public API docs</a>.
They basically create a new public repo for each public API they need to document.</p>

<p>This is great, but maintaining docs separate from the project can be challenging,
so we&#8217;ve opted for having 2 document branches in our projects.</p>

<ul>
<li>doc</li>
<li>gh-pages</li>
</ul>


<p>The <em>doc</em> branch is used for internal documentation.
We delete all code after branch creation, then simply maintain an organized set of markdown files.</p>

<p>The <em>gh-pages</em> branch is used for all public documentation.
The great thing about <a href="http://pages.github.com/">github pages</a> is that the site they generate is always public&#8230;
even for private repos. We leverage this to expose public docs.</p>

<p>For a simple example, you can review one of our public APIs <a href="http://engineering.1on1.com/lead_assure/">here</a>.</p>

<p>For those with access to the private repo, you can view the various doc branches.
<a href="https://github.com/one-on-one/lead_assure/tree/doc">doc</a> <a href="https://github.com/one-on-one/lead_assure/tree/gh-pages">gh-pages</a></p>

<p>Managing docs on the project itself helps ensure our docs get written and maintained.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I like Go: Porting Ruby's State Jacket]]></title>
    <link href="http://one-on-one.github.com/blog/2013/03/23/why-i-like-go/"/>
    <updated>2013-03-23T09:51:00-06:00</updated>
    <id>http://one-on-one.github.com/blog/2013/03/23/why-i-like-go</id>
    <content type="html"><![CDATA[<p>I&#8217;m fairly new to professional software engineering and my start was not typical. I first started in academia with Prolog and Lisp; my background is in formal/mathematical philosophy and linguistics. In the last few months I have spent concentrated blocks of time on learning Nodejs, Clojure, Scala, and now Go.</p>

<p>Beside the academic and professional development benefits of doing this, I have a practical reason: I dream of building a very fast, efficient, &#8220;smart&#8221;, and easy to use logging tool. By &#8220;smart&#8221; I mean applying machine learning and natural language processing to the semi-structured data found in production logs. This means I need support for large matrix multiplication, among other things. Ruby and Python simply do not fit the bill (for me). In evaluating Go I decided to port the <a href="https://github.com/hopsoft/state_jacket">Ruby project Statejacket by Nate Hopkins</a> to Go.</p>

<p>If you just want to see code, the initial finished version is up on github now at <a href="https://github.com/jbowles/state_jacket">SateJacket Port</a>.</p>

<p>You can also find similar projects:</p>

<ul>
<li><a href="https://github.com/whap/statejacket">Brian Johnson&#8217;s Go port of Ruby SateJacket</a></li>
<li><a href="https://github.com/brentburgoyne/state-jacket-js">Brent Burgyone&#8217;s NodeJS port of Ruby StateJacket</a></li>
</ul>


<!-- more -->


<p>Don&#8217;t get me wrong, I would love to do write my loggin tool in Ruby. I tried a couple times and did not like it. Additionally, I do not want to invest in Python given that it&#8217;s so similar to Ruby. I&#8217;m not going to compare all the pros and cons of the different langauges mentioned in this post (you can find enough of that fud on HackerNews), instead, let&#8217;s just explain my choices as highly personal and motivated by what felt like was the right way for me.</p>

<p>I was initially drawn to Clojure because it is virtually the only chance a developer has of getting paid to work with a Lisp, and then switched efforts to Scala because it&#8217;s more realistic to convince your team to do something in Scala than it is Clojure. Nodejs is great and V8 is blazing, but once I read through a <a href="http://golang.org/doc/codewalk/markov/">Go Codewalk for Markov Chain random text generation</a> I was hooked. It seemed to strike the right balance between:</p>

<ul>
<li>High level API of Ruby <strong>AND</strong> low level concerns of C</li>
<li><em>the right thing</em> Lisp <strong>AND</strong> <em>worse is better</em> C/Unix

<ul>
<li>See, for example <a href="http://www.jwz.org/doc/worse-is-better.html">The Rise of &#8220;Worse is Better&#8221;</a></li>
</ul>
</li>
<li>Feeling excited about <strong>AND</strong> responsible for good engineering decisions</li>
</ul>


<h2>Porting Ruby to Go</h2>

<p><a href="https://github.com/hopsoft/state_jacket">State Jacket</a> is a Ruby library for helping to &#8220;Intuitively define state machine like states and transitions&#8221;.</p>

<blockquote><p>StateJacket simplifies things by isolating the management of states & transitions. Events are left out, making it much easier to reason about what states exist and how they transition to other states.</p><footer><strong>Nate Hopkins, State Jacket</strong> <cite><a href='https://github.com/hopsoft/state_jacket/blob/master/README.md'>README</a></cite></footer></blockquote>


<p></p>

<p>I spent about 6 hours initially porting 70 lines of Ruby to 70 lines of Go. Much of my time was spent in figuring out the right structure for the data/object; the rest with familiarizing myself with Go idioms. It is a simple project but I want to spend more time refining it until I create a Go package for it. An early version is below and the finished version is up on github now at <a href="https://github.com/jbowles/state_jacket">SateJacket Port</a>.</p>

<div><script src='https://gist.github.com/5228042.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Octopress]]></title>
    <link href="http://one-on-one.github.com/blog/2013/03/15/getting-started-with-octopress/"/>
    <updated>2013-03-15T08:45:00-06:00</updated>
    <id>http://one-on-one.github.com/blog/2013/03/15/getting-started-with-octopress</id>
    <content type="html"><![CDATA[<h3>The good</h3>

<p><a href="http://octopress.org/">Octopress</a> is an <strong>out of the box</strong> blogging solution that sits atop <a href="https://github.com/mojombo/jekyll">Jekyll</a>
<em>a static site generator</em>.
It&#8217;s great for folks who want to quickly get a blog up and running on <a href="https://github.com/">Github</a>.</p>

<h3>The bad</h3>

<p>Octopress is ripe with inconsistent and varied ways to customize the CSS, templates, partials, and conditional logic.
This is anathema for anyone who wants a sensible way to truly control things.</p>

<p>Luckily, I&#8217;ve customized this blog till it&#8217;s &#8220;good enough&#8221;
so my teammates shouldn&#8217;t have to experience the pain that I went through.</p>

<h3>The future</h3>

<p>I highly recommend considering a vanilla Jekyll solution over Octopress&#8230;
even if you are already running Octopress.</p>

<p>Having said all of that, here are some tips to help you get up to speed quickly with Octopress.</p>

<h2>Quick Start</h2>

<p>Here&#8217;s how to get setup as a writer for this blog.
Run the following commands in your shell.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:one-on-one/one-on-one.github.com.git
</span><span class='line'>cd one-on-one.github.com
</span><span class='line'>bundle
</span><span class='line'>rake setup_github_pages[git@github.com:one-on-one/one-on-one.github.com.git]
</span><span class='line'>rake -T</span></code></pre></td></tr></table></div></figure>


<p><strong>zsh users</strong>: You will want to run <code>rake setup_github_pages[git@github.com:one-on-one/one-on-one.github.com.git]</code></p>

<p>The last command lists the rake tasks that Octopress makes available to you.</p>

<!-- more -->


<h2>Writing</h2>

<p>You can write blog articles using your favorite text editor.
To get started simply run the following command in a shell.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post['The title of the post']</span></code></pre></td></tr></table></div></figure>


<p><strong>zsh users</strong>: You will want to run <code>noglob rake new_post['The title of the post']</code></p>

<p>The above command produces output like this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Creating new post: source/_posts/2013-03-18-the-title-of-the-post.markdown</span></code></pre></td></tr></table></div></figure>


<p>Now open the newly created file in your favorite editor.</p>

<h3>Front Matter</h3>

<p>The first thing you will notice is the <a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">YAML front matter</a>.
Something that looks like this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: custom_post
</span><span class='line'>title: Getting Started with Octopress
</span><span class='line'>date: 2013-03-15 08:45
</span><span class='line'>comments: true
</span><span class='line'>categories:
</span><span class='line'>
</span><span class='line'>author: Nathan Hopkins
</span><span class='line'>gravatar: 254ec240c9143768df8ec27182764cad
</span><span class='line'>github: hopsoft
</span><span class='line'>twitter: natehop
</span><span class='line'>linkedin: 2951631
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>The following entries are included by default.</p>

<ul>
<li><strong>layout</strong> be sure to change this to <code>custom_post</code></li>
<li><strong>title</strong> the title of your post</li>
<li><strong>date</strong> the date the post was written</li>
<li><strong>comments</strong> indicates you allow comments on the post</li>
<li><strong>categories</strong> a <a href="http://en.wikipedia.org/wiki/YAML#Lists">YAML list</a> or space separated string of meta tags for this post</li>
</ul>


<p>These entries must be manually added.</p>

<ul>
<li><strong>author</strong> the name of the author</li>
<li><strong>gravatar</strong> the author&#8217;s <a href="https://en.gravatar.com/site/implement/hash/">Gravatar MD5 hash</a></li>
<li><strong>github</strong> the author&#8217;s Github username</li>
<li><strong>twitter</strong> the author&#8217;s Twitter handle</li>
<li><strong>linkedin</strong> the author&#8217;s Linked In id</li>
</ul>


<p>After you have taken care of the YAML front matter, simply write your article using <a href="http://daringfireball.net/projects/markdown/">Markdown</a> syntax.</p>

<p>If you don&#8217;t want the entire article to show on the index page, simply add a <code>more</code> flag to break the content apart.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Show on the home page.
</span><span class='line'>
</span><span class='line'>&lt;!-- more --&gt;
</span><span class='line'>
</span><span class='line'>Only shows on the article page.</span></code></pre></td></tr></table></div></figure>


<h3>Previewing</h3>

<p>To preview your post, run the following command from a shell.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>Then navigate to <a href="http://localhost:4000">http://localhost:4000</a> to view your article.
Simply refresh the browser window as you make changes.</p>

<h3>Publishing</h3>

<p>Before you can publish, you must run the following rake task.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages[git@github.com:one-on-one/one-on-one.github.com.git]</span></code></pre></td></tr></table></div></figure>


<p>Next commit your article to the git repo.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit -am "Wrote an article."
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>Then publish with rake.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake gen_deploy</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it! Now get to writing.</p>

<h2>Customizing Octopress</h2>

<p>You can ignore this section unless you have a need to customize the markup or CSS.
If you plan to customize things, please read on.</p>

<h3>CSS</h3>

<p>There is a <code>custom</code> directory under the <code>sass</code> directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|- blog
</span><span class='line'>  |- sass
</span><span class='line'>    |- custom
</span><span class='line'>      |- _colors.scss
</span><span class='line'>      |- _fonts.scss
</span><span class='line'>      |- _layout.scss
</span><span class='line'>      |- _styles.scss</span></code></pre></td></tr></table></div></figure>


<p>This custom directory is the intended home for all of your css customizations.</p>

<ul>
<li><code>_colors.scss</code> where color overrides should be defined</li>
<li><code>_fonts.scss</code> where font overrides should be defined</li>
<li><code>_layout.scss</code> where layout overrides should be defined</li>
<li><code>_styles.scss</code> where all other overrides should be defined</li>
</ul>


<p>You can also add additional stylesheets under the custom directory.
For example, I&#8217;ve added Font Awesome&#8217;s stylesheet.</p>

<h3>Markup</h3>

<p>There is a <code>custom</code> directory under the <code>source/_includes</code> directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|- blog
</span><span class='line'>  |- source
</span><span class='line'>    |- _includes
</span><span class='line'>      |- custom
</span><span class='line'>        |- asides
</span><span class='line'>        |- post
</span><span class='line'>        |- after_footer.html
</span><span class='line'>        |- etc...</span></code></pre></td></tr></table></div></figure>


<p>The intent is to isolate markup overrides to things that live in the custom directory.</p>

<p>At first glance it seems possible to override the important files defined in the includes directory.
The problem is that not all files are mirrored in the custom directory.
Also, the naming convention and file intent varies between the two directories.</p>

<p>This leads to confusion. It&#8217;s also too restrictive.</p>

<p>In order to get around the limitations, I&#8217;ve started adding new layouts to the <code>source/_layouts</code> directory.
I use the convention, <code>custom_ORIGINAL_NAME.html</code> for the new layouts.</p>

<p>The custom layout can then be specified in the YAML front matter of individual posts.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: custom_post
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>These pain points are why I recommend moving to a vanilla Jekyll solution.</p>

<p>Enjoy!</p>

<p>&#8230;</p>
]]></content>
  </entry>
  
</feed>
